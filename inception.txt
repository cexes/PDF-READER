Resources:

 The user can open the PDF, Create anotaion above the text, mark text, and they can create
a note and this not is save, when click that not open a page

##################################################################################################

 Tecnology:

 - Front End: ReactJs

 - Back End: NodeJs
 
 - DataBase: PostGresql
 
 - Maybe a Java for App, consuming the nodejs API, or ReactNative.
 
 - Later, i will implement the Redis for Cache


###################################################################################################



Skills:

 - Learn how extract the pdf and render that on FrontEnd

 - Maybe use some libary


###################################################################################################


LoginPage: Ensure the login page is secure and users are properly authenticated before allowing PDFs to be uploaded and viewed.

PDF Upload: Implement secure upload functionality for PDFs, including file type and size validation to prevent security attacks.

PDF Rendering: Front-end PDF rendering can be done using JavaScript libraries such as PDF.js. Make sure rendering is efficient and the PDF displays correctly.

Saving PDF to Back-End: When saving PDF to the server, ensure that the storage is secure and efficient. Consider cloud storage options or a secure file system.

Backend:

Routes: Create routes in the backend to handle login requests, PDF uploads, and other necessary operations.

PDF and Annotation Storage: Define a storage structure for PDFs and associated annotations. A database can be useful for this purpose, allowing for organized storage and efficient retrieval of data.

Security: Implement robust security measures to protect user data, including proper authentication and authorization, encryption of sensitive data, and protection against common threats such as SQL injection.

Scalability: Consider how the architecture can scale to accommodate large numbers of users and documents if necessary.

Backup and Recovery: Implement backup and recovery strategies to ensure continuous data availability, even in the event of system failures.

Performance: Monitor and optimize application performance, especially when dealing with large PDFs or a large number of concurrent users.

Compliance: Check whether the application meets regulatory privacy and data security requirements, depending on your location and target audience.
